{"version":3,"sources":["data.ts","Table.tsx","DatePicker.tsx","App.tsx","hooks.tsx","serviceWorker.ts","index.tsx"],"names":["parseData","data","reduce","prev","current","dateString","Date","date","toDateString","list","get","set","Map","aggregateData","totalSentiment","score","sentimentResult","magnitude","sentiment","length","constructURL","fromDate","datedURL","URL","dateToday","toLocaleDateString","searchParams","append","toISOString","fetchData","a","fetch","toString","response","status","Error","json","results","parsedResult","dataResult","entries","value","aggregatedData","parsedDate","push","sort","first","second","getTime","console","error","useStyles","makeStyles","table","minWidth","text","color","link","ResultTable","result","classes","createTableCell","cellLabel","TableCell","className","align","TableContainer","Table","aria-label","TableHead","TableRow","map","label","TableBody","row","sentimentScore","currentDate","key","component","scope","Link","href","title","toLocaleString","contentSnippet","Tooltip","toFixed","placement","theme","createStyles","container","display","flexWrap","textField","marginLeft","spacing","marginRight","width","input","DatePicker","selectedDate","updateDate","useState","errorFlag","setErrorFlag","TextField","id","type","defaultValue","onChange","event","target","potentialDate","isNaN","InputLabelProps","shrink","InputProps","dataSetProperties","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","App","setResults","selectedIndex","setSelectedIndex","labels","datasets","graphData","setGraphData","setSelectedDate","debouncedSelectedDate","delay","debouncedValue","setDebouncedValue","useEffect","timeout","setTimeout","clearTimeout","useDebounce","selectedResult","getElementAtEvent","element","elements","index","_index","selectDate","CircularProgress","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.2611623b.chunk.js","sourcesContent":["interface DataInterface {\n    title: string\n    link: string\n    date: string\n    contentSnippet: string\n    sentimentResult: { score: number; magnitude: number }\n}\n\ninterface DataResponse {\n    results: DataInterface[]\n}\n\ninterface AggregatedData {\n    data: DataInterface[]\n    sentiment: { score: number; magnitude: number }\n}\n\nexport interface Result extends AggregatedData {\n    date: Date\n}\n\nfunction parseData(data: DataInterface[]): Map<string, DataInterface[]> {\n    const processedResult = data.reduce((prev, current) => {\n        const dateString = new Date(current.date).toDateString()\n        const list = prev.get(dateString) || []\n        prev.set(dateString, [...list, current])\n        return prev\n    }, new Map<string, DataInterface[]>())\n    return processedResult\n}\n\nfunction aggregateData(data: DataInterface[]): AggregatedData {\n    const totalSentiment = data.reduce(\n        (prev, current) => {\n            prev.score += current.sentimentResult.score\n            prev.magnitude += current.sentimentResult.magnitude\n            return prev\n        },\n        { score: 0, magnitude: 0 },\n    )\n    return {\n        data,\n        sentiment: { score: totalSentiment.score / data.length, magnitude: totalSentiment.magnitude / data.length },\n    }\n}\n\nfunction constructURL(fromDate: Date): URL {\n    const url = 'https://us-central1-df-side-projects.cloudfunctions.net/news-rss-http'\n    const datedURL = new URL(url)\n    // Normalize to the date\n    const dateToday = new Date(fromDate.toLocaleDateString())\n    datedURL.searchParams.append('fromDateString', dateToday.toISOString())\n    return datedURL\n}\n\nexport async function fetchData(fromDate: Date = new Date()): Promise<Result[]> {\n    try {\n        const datedURL = constructURL(fromDate)\n        const response = await fetch(datedURL.toString())\n        if (response.status !== 200) {\n            const error = new Error(`Unexpected status code: ${response.status}`)\n            throw error\n        }\n        const { results } = (await response.json()) as DataResponse\n        const parsedResult = parseData(results)\n        const dataResult = []\n        for (const [date, value] of parsedResult.entries()) {\n            const aggregatedData = aggregateData(value)\n            const parsedDate = new Date(date)\n            dataResult.push({ ...aggregatedData, date: parsedDate })\n        }\n        dataResult.sort((first, second) => first.date.getTime() - second.date.getTime())\n        return dataResult\n    } catch (e) {\n        console.error(`error happened: ${e}`)\n        throw e\n    }\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Link from '@material-ui/core/Link'\nimport { Result } from './data'\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n    text: {\n        color: 'white',\n    },\n    link: {\n        color: 'white',\n    },\n})\n\nconst evaluateSentiment = (sentimentScore: number): string => {\n    if (sentimentScore > 0) {\n        return '👍'\n    }\n    if (sentimentScore < 0) {\n        return '👎'\n    }\n    return '🤔'\n}\n\ninterface ResultTableProps {\n    result: Result | null\n}\n\nexport function ResultTable({ result }: ResultTableProps): JSX.Element | null {\n    const classes = useStyles()\n\n    if (!result) {\n        return null\n    }\n    const createTableCell = (cellLabel: string): JSX.Element => {\n        return (\n            <TableCell className={classes.text} align=\"left\">\n                {cellLabel}\n            </TableCell>\n        )\n    }\n    return (\n        <TableContainer>\n            <Table className={classes.table} aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        {['Title', 'Date', 'Summary', 'Sentiment'].map(label => {\n                            return createTableCell(label)\n                        })}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {result.data.map(row => {\n                        const currentDate = new Date(row.date)\n                        return (\n                            <TableRow key={row.link}>\n                                <TableCell component=\"th\" scope=\"row\" className={classes.text}>\n                                    <Link href={row.link}>{row.title}</Link>\n                                </TableCell>\n                                {createTableCell(currentDate.toLocaleString())}\n                                {createTableCell(row.contentSnippet)}\n                                <Tooltip title={row.sentimentResult.score.toFixed(3)} placement=\"left\">\n                                    {createTableCell(evaluateSentiment(row.sentimentResult.score))}\n                                </Tooltip>\n                            </TableRow>\n                        )\n                    })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}\n","import React, { useState } from 'react'\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        container: {\n            display: 'flex',\n            flexWrap: 'wrap',\n        },\n        textField: {\n            marginLeft: theme.spacing(1),\n            marginRight: theme.spacing(1),\n            width: 200,\n        },\n        label: {\n            color: 'white',\n        },\n        input: {\n            color: 'white',\n        },\n    }),\n)\n\ninterface EventInterface {\n    target: { value: string }\n}\n\ninterface DatePickerProps {\n    selectedDate: Date\n    updateDate(date: Date): void\n}\n\nexport function DatePicker({ selectedDate, updateDate }: DatePickerProps): JSX.Element {\n    const [errorFlag, setErrorFlag] = useState(false)\n\n    const handler = (event: EventInterface): void => {\n        const dateString = event.target.value\n        const potentialDate = new Date(dateString)\n        if (isNaN(potentialDate.getTime())) {\n            setErrorFlag(true)\n            return\n        }\n        setErrorFlag(false)\n        updateDate(potentialDate)\n    }\n\n    const classes = useStyles()\n    return (\n        <TextField\n            id=\"date\"\n            label=\"Start Date\"\n            type=\"date\"\n            defaultValue={selectedDate.toLocaleDateString()}\n            className={classes.textField}\n            onChange={handler}\n            error={errorFlag}\n            InputLabelProps={{\n                shrink: true,\n                className: classes.label,\n            }}\n            InputProps={{ className: classes.input }}\n        />\n    )\n}\n","import React, { useState, useEffect } from 'react'\nimport { Line } from 'react-chartjs-2'\nimport './App.css'\nimport { fetchData, Result } from './data'\nimport { ResultTable } from './Table'\nimport { DatePicker } from './DatePicker'\nimport { useDebounce } from './hooks'\n\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nconst dataSetProperties = {\n    label: 'News sentiment',\n    fill: false,\n    lineTension: 0.1,\n    backgroundColor: 'rgba(75,192,192,0.4)',\n    borderColor: 'rgba(75,192,192,1)',\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0.0,\n    borderJoinStyle: 'miter',\n    pointBorderColor: 'rgba(75,192,192,1)',\n    pointBackgroundColor: '#fff',\n    pointBorderWidth: 1,\n    pointHoverRadius: 5,\n    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\n    pointHoverBorderWidth: 2,\n    pointRadius: 1,\n    pointHitRadius: 10,\n}\n\ninterface GraphData {\n    labels: string[]\n    datasets: { label: string; data: number[] }[]\n}\n\nconst App = (): JSX.Element => {\n    const [results, setResults] = useState(null as Result[] | null)\n    const [selectedIndex, setSelectedIndex] = useState(null as number | null)\n    const [graphData, setGraphData] = useState({ labels: [], datasets: [] } as GraphData)\n    const [selectedDate, setSelectedDate] = useState(new Date())\n    const debouncedSelectedDate = useDebounce(selectedDate, 1000)\n    const selectDate = (elements: { _index: number }[]): void => {\n        if (elements.length === 0) {\n            return\n        }\n        const index = elements[0]._index\n        setSelectedIndex(index)\n    }\n\n    useEffect((): void => {\n        ;(async (): Promise<void> => {\n            const results = await fetchData(debouncedSelectedDate)\n            const labels = results.map(result => result.date.toLocaleDateString())\n            const data = results.map(result => result.sentiment.score)\n            setResults(results)\n            setGraphData({ labels, datasets: [{ ...dataSetProperties, data }] })\n        })()\n    }, [debouncedSelectedDate])\n\n    const selectedResult = results && selectedIndex !== null ? results[selectedIndex] : null\n    return (\n        <div className=\"App App-header\">\n            <header>Financial News</header>\n            {results ? (\n                <>\n                    <div className=\"picker\">\n                        <DatePicker selectedDate={debouncedSelectedDate} updateDate={setSelectedDate} />\n                    </div>\n                    <div className=\"graph\">\n                        <Line data={graphData} getElementAtEvent={(element): void => selectDate(element)} />\n                    </div>\n                </>\n            ) : (\n                <CircularProgress className=\"loader\" />\n            )}\n            <div className=\"table\">\n                <ResultTable result={selectedResult} />\n            </div>\n        </div>\n    )\n}\n\nexport default App\n","import { useState, useEffect } from 'react'\n\nexport function useDebounce<T>(value: T, delay: number): T {\n    const [debouncedValue, setDebouncedValue] = useState(value)\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setDebouncedValue(value)\n        }, delay)\n        return (): void => clearTimeout(timeout)\n    }, [value, delay])\n    return debouncedValue\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.')\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}