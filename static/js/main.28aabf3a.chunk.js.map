{"version":3,"sources":["data.ts","Table.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["url","parseData","data","reduce","prev","current","dateString","Date","date","toDateString","list","get","set","Map","aggregateData","totalSentiment","score","sentimentResult","magnitude","sentiment","length","fetchData","a","fetch","response","status","Error","json","results","parsedResult","dataResult","entries","value","aggregatedData","parsedDate","push","sort","first","second","getTime","console","error","makeStyles","table","minWidth","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","App","props","state","graphData","selectedIndex","selectDay","bind","log","map","result","toLocaleDateString","this","setState","element","index","_index","selectedResult","className","getElementAtEvent","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","sentimentScore","currentDate","key","link","scope","href","title","toLocaleString","contentSnippet","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.28aabf3a.chunk.js","sourcesContent":["const url = 'https://us-central1-df-side-projects.cloudfunctions.net/news-rss-http'\n\ninterface DataInterface {\n    title: string\n    link: string\n    date: string\n    contentSnippet: string\n    sentimentResult: { score: number; magnitude: number }\n}\n\ninterface DataResponse {\n    results: DataInterface[]\n}\n\ninterface AggregatedData {\n    data: DataInterface[]\n    sentiment: { score: number; magnitude: number }\n}\n\nexport interface Result extends AggregatedData {\n    date: Date\n}\n\nfunction parseData(data: DataInterface[]): Map<string, DataInterface[]> {\n    const processedResult = data.reduce((prev, current) => {\n        const dateString = new Date(current.date).toDateString()\n        const list = prev.get(dateString) || []\n        prev.set(dateString, [...list, current])\n        return prev\n    }, new Map<string, DataInterface[]>())\n    return processedResult\n}\n\nfunction aggregateData(data: DataInterface[]): AggregatedData {\n    const totalSentiment = data.reduce(\n        (prev, current) => {\n            prev.score += current.sentimentResult.score\n            prev.magnitude += current.sentimentResult.magnitude\n            return prev\n        },\n        { score: 0, magnitude: 0 },\n    )\n    return {\n        data,\n        sentiment: { score: totalSentiment.score / data.length, magnitude: totalSentiment.magnitude / data.length },\n    }\n}\n\nexport async function fetchData(): Promise<Result[]> {\n    try {\n        const response = await fetch(url)\n        if (response.status !== 200) {\n            const error = new Error(`Unexpected status code: ${response.status}`)\n            throw error\n        }\n        const { results } = (await response.json()) as DataResponse\n        const parsedResult = parseData(results)\n        const dataResult = []\n        for (const [date, value] of parsedResult.entries()) {\n            const aggregatedData = aggregateData(value)\n            const parsedDate = new Date(date)\n            dataResult.push({ ...aggregatedData, date: parsedDate })\n        }\n        dataResult.sort((first, second) => first.date.getTime() - second.date.getTime())\n        return dataResult\n    } catch (e) {\n        console.error(`error happened: ${e}`)\n        throw e\n    }\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TableRow from '@material-ui/core/TableRow'\nimport Paper from '@material-ui/core/Paper'\nimport { Result } from './data'\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n})\n\nconst evaluateSentiment = (sentimentScore: number) => {\n    if (sentimentScore > 0) {\n        return 'üëç'\n    }\n    if (sentimentScore < 0) {\n        return 'üëé'\n    }\n    return 'ü§î'\n}\n\nexport function ResultTable(result: Result) {\n    //const classes = useStyles()\n\n    return (\n        <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell align=\"left\">Title</TableCell>\n                        <TableCell align=\"left\">Date</TableCell>\n                        <TableCell align=\"left\">Summary</TableCell>\n                        <TableCell align=\"left\">Sentiment</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {result.data.map(row => {\n                        const currentDate = new Date(row.date)\n                        return (\n                        <TableRow key={row.link}>\n                            <TableCell component=\"th\" scope=\"row\">\n                                <a href={row.link}>{row.title}</a>\n                            </TableCell>\n                            <TableCell align=\"left\">{currentDate.toLocaleString()}</TableCell>\n                            <TableCell align=\"left\">{row.contentSnippet}</TableCell>\n                            <TableCell align=\"left\">{evaluateSentiment(row.sentimentResult.score)} {row.sentimentResult.score}</TableCell>\n                        </TableRow>\n                        )\n                    }\n                    )}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    )\n}\n","import React from 'react';\nimport { Line } from \"react-chartjs-2\";\nimport logo from './logo.svg';\nimport './App.css';\nimport { fetchData, Result } from './data'\nimport { ResultTable } from './Table'\n\nconst data = {\n  labels: [],\n  datasets: [\n    {\n      label: 'News sentiment',\n      fill: false,\n      lineTension: 0.1,\n      backgroundColor: 'rgba(75,192,192,0.4)',\n      borderColor: 'rgba(75,192,192,1)',\n      borderCapStyle: 'butt',\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: 'miter',\n      pointBorderColor: 'rgba(75,192,192,1)',\n      pointBackgroundColor: '#fff',\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n      pointHoverBorderColor: 'rgba(220,220,220,1)',\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: []\n    }\n  ]\n}\n\ninterface GraphData {\n  labels: string[],\n  datasets: {label: string, data: number[]}[]\n}\n\ninterface AppState {\n  graphData: GraphData\n  results: Result[]\n  selectedIndex: number | null\n}\n\nclass App extends React.Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props)\n    this.state = { graphData: data, results: [], selectedIndex: null }\n    this.selectDay = this.selectDay.bind(this)\n  }\n\n  async componentDidMount() {\n    const results = await fetchData()\n    console.log(results)\n    const labels = results.map(result => result.date.toLocaleDateString())\n    const data = results.map(result => result.sentiment.score)\n    this.setState((prev) => {\n      prev.graphData.labels = labels\n      prev.graphData.datasets[0].data = data\n      return { graphData: prev.graphData, results }\n    })\n  }\n\n  selectDay(element: any) {\n    if (element.length === 0) {\n      return\n    }\n    const index = element[0]._index\n    this.setState({ selectedIndex: index})\n  }\n\n  render() {\n    const { results, selectedIndex } = this.state\n    const selectedResult = selectedIndex ? results[selectedIndex] : null\n    return (\n      <div className=\"App App-header\">\n        <header>\n          Financial News\n        </header>\n        <Line data={data} getElementAtEvent={element => this.selectDay(element)} />\n        { selectedResult && ResultTable(selectedResult) }\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.')\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister()\n            })\n            .catch(error => {\n                console.error(error.message)\n            })\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}